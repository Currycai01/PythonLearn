{"name": "test12", "status": "broken", "statusDetails": {"message": "TypeError: Object of type method is not JSON serializable", "trace": "self = <testcase.TestBaidu.Testearch object at 0x0000021B4BCFD490>\n\n    @pytest.mark.debug\n    @allure.story('测试点击退出登录')\n    def test12(self):\n>       self.baidu_search.login_exit()\n\ntestcase\\TestBaidu.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\Baidu.py:76: in login_exit\n    super().click(\"xpath\",self.login_exit)\nBase\\base.py:49: in click\n    el = self.FindElement(type, value)\nBase\\base.py:41: in FindElement\n    el = self.driver.find_element(By.XPATH,value)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:438: in execute\n    response = self.command_executor.execute(driver_command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:288: in execute\n    data = utils.dump_json(params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\utils.py:24: in dump_json\n    return json.dumps(json_struct)\nD:\\install\\Python\\lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\nD:\\install\\Python\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\nD:\\install\\Python\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x0000021B4AF371C0>\no = <bound method BaiduPage.login_exit of <page.Baidu.BaiduPage object at 0x0000021B4BC2A460>>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type method is not JSON serializable\n\nD:\\install\\Python\\lib\\json\\encoder.py:179: TypeError"}, "start": 1705489428734, "stop": 1705489428734, "uuid": "0e66a6b1-3e64-427d-bb2f-dd4eb2332628", "historyId": "f9c32295e9c3f290479082f9475b06b6", "testCaseId": "f9c32295e9c3f290479082f9475b06b6", "fullName": "testcase.TestBaidu.Testearch#test12", "labels": [{"name": "feature", "value": "百度首页"}, {"name": "story", "value": "测试点击退出登录"}, {"name": "tag", "value": "debug"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "TestBaidu"}, {"name": "subSuite", "value": "Testearch"}, {"name": "host", "value": "DESKTOP-5TJAGBN"}, {"name": "thread", "value": "32172-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.TestBaidu"}]}